ASSIGNMENT NO :
Floyd_warshall.CPP =>

#include<iostream>
using namespace std;
class shortestpath
{
private :
	int n;
	int mat[10][10];
public:
             shortestpath()
	{
                           cout<<"enter no of vertices";
		cin>>n;
		for (int i=0;i<n;i++)
		{
			for (int j=0;j<n;j++)
			{
				mat[i][j]=0;
			}
		}
	}
	void create();
	void display();
	void shortest();
};
void shortestpath::create()
{
	int v1,v2,cost;
	int ans;
	do
	{
		cout<<"enter edge and all its cost";
		cin>>v1>>v2>>cost;
		mat[v1][v2]=cost;
		mat[v2][v1]=cost;
		cout<<"do you want to enter one more edge";
		cin>>ans;
              }while(ans==1);
}
void shortestpath::display()
{
	int i,j;
	cout<<"graph using adjancy matrix";
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			cout<< mat[i][j]<<" \t";
		}
		cout<<"\n";
	}
}
void shortestpath::shortest()
{
	for(int k=0;k<n;k++)
	{
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				if((i!=j) && (mat[i][j]!=0) && (mat[i][j]>mat[i][k]+mat[k][j]))
				{
					mat[i][j]=mat[i][k]+mat[k][j] ;
				}
			}
		}
	}
	cout<<"graph using adjancy matrix";
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				cout<< mat[i][j]<<" \t";
			}
			cout<<"\n";
		}
}


OUTPUT =>
-----------------Graphs------------------

Enter number of vertices : 3
Enter vertices and cost : 
0 1 8
Enter more edges?(0/1)1
Enter vertices and cost : 
1 0 5
Enter more edges?(0/1)1
Enter vertices and cost : 
0 2 2
Enter more edges?(0/1)1
Enter vertices and cost : 
2 0 10
Enter more edges?(0/1)1
Enter vertices and cost : 
1 2 4
Enter more edges?(0/1)1
Enter vertices and cost : 
2 1 
3
Enter more edges?(0/1)0

Graph using adjacency matrix : 
	0 8 2 
	5 0 4 
	10 3 0 
After warshall : 
Graph using adjacency matrix : 
	0 5 2 
	5 0 4 
	8 3 0
